from fpdf import FPDF
from datetime import datetime

class DocumentTemplate:
    def __init__(self):
        self.pdf = FPDF()
        self.pdf.set_auto_page_break(auto=True, margin=15)

    def create_header(self, sender_name="INVOICER", sender_address="Some place I live"):
        self.pdf.add_page()
        self.pdf.set_font("Arial", "B", 20)
        self.pdf.cell(0, 10, sender_name, ln=True)
        self.pdf.set_font("Arial", size=10)
        self.pdf.cell(0, 6, sender_address, ln=True)

    def add_recipient_and_invoice_info(self, client_name, client_address, invoice_number, invoice_date, due_date):
        self.pdf.ln(10)

        # Client info
        self.pdf.set_font("Arial", "B", 12)
        self.pdf.cell(100, 10, txt=client_name.upper(), ln=True)
        self.pdf.set_font("Arial", size=10)
        self.pdf.cell(100, 6, txt=client_address, ln=True)

        # Invoice info
        self.pdf.set_xy(140, 40)
        self.pdf.set_font("Arial", size=10)
        self.pdf.cell(30, 8, "Invoice No.:", ln=0)
        self.pdf.cell(30, 8, str(invoice_number), ln=1)

        self.pdf.set_x(140)
        self.pdf.cell(30, 8, "Invoice Date:", ln=0)
        self.pdf.cell(30, 8, invoice_date, ln=1)

        self.pdf.set_x(140)
        self.pdf.cell(30, 8, "Due Date:", ln=0)
        self.pdf.cell(30, 8, due_date, ln=1)

    def add_items_table(self, items):
        self.pdf.ln(10)
        self.pdf.set_fill_color(240, 240, 240)
        self.pdf.set_font("Arial", "B", 10)

        headers = ["#", "Description", "Quantity", "Unit", "Price", "Amount"]
        widths = [10, 70, 20, 20, 30, 30]

        for i, header in enumerate(headers):
            self.pdf.cell(widths[i], 10, header, 1, 0, 'C', True)
        self.pdf.ln()

        self.pdf.set_font("Arial", size=10)
        total = 0
        for i, item in enumerate(items, 1):
            description, qty, unit_price = item
            amount = qty * unit_price
            total += amount
            row = [str(i), description, str(qty), f"{unit_price}", f"{unit_price}", f"{amount}"]
            for j, val in enumerate(row):
                align = 'C' if j != 1 else 'L'
                self.pdf.cell(widths[j], 10, val, 1, 0, align)
            self.pdf.ln()

        return total

    def add_total_section(self, total):
        self.pdf.ln(5)
        self.pdf.set_font("Arial", "B", 16)
        self.pdf.set_xy(140, self.pdf.get_y())
        self.pdf.cell(60, 12, f"Kshs. {int(total)}", ln=True, align='R')

    def add_notes(self, text="These are your notes for your client."):
        self.pdf.ln(15)
        self.pdf.set_font("Arial", "B", 12)
        self.pdf.cell(0, 10, "Notes: ", ln=True)

        self.pdf.set_font("Arial", "", 10)
        self.pdf.multi_cell(0, 6, text)

    def add_footer(self):
        self.pdf.set_y(-30)
        self.pdf.set_font("Arial", "I", 9)
        self.pdf.cell(0, 10, "Generated by Invoicer App", 0, 0, 'C')

    def generate(self, customer_name, customer_address, invoice_number, items):
        self.create_header()
        self.add_recipient_and_invoice_info(
            client_name=customer_name,
            client_address=customer_address,
            invoice_number=invoice_number,
            invoice_date=datetime.now().strftime("%b %d, %Y"),
            due_date="May 30, 2021"
        )
        total = self.add_items_table(items)
        self.add_total_section(total)
        self.add_notes("Include details such as how to pay and any other relevant information.")
        self.add_footer()
        return self.pdf

